basePath: /
definitions:
  add.AddResponse:
    properties:
      id:
        type: string
    type: object
  domain.Feature:
    properties:
      description:
        type: string
      id:
        type: string
      name:
        type: string
      userId:
        type: string
      votes:
        items:
          type: string
        type: array
    required:
    - description
    - name
    - userId
    type: object
  upvote.UpvoteRequest:
    properties:
      userId:
        example: 202c25c4-b2ce-4514-9045-890a1aa896ea
        type: string
    required:
    - userId
    type: object
  upvote.UpvoteResponse:
    properties:
      featureId:
        example: b1f01569-ecff-4c60-a716-435b2e51f1ff
        type: string
      voteCount:
        example: 45928
        type: integer
    type: object
host: localhost:8083
info:
  contact:
    email: cloud@musictribe.com
    name: MCloud Team
  description: This API allows you to create, get, alter and delete features.
  title: features API
  version: "1.0"
paths:
  /api/{userId}:
    get:
      consumes:
      - application/json
      description: Get a all features releted to this userId.
      parameters:
      - description: User UUID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Feature'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Get all of a users features.
    post:
      consumes:
      - application/json
      description: Add a new feature for this user id.
      parameters:
      - description: Feature
        in: body
        name: feature
        required: true
        schema:
          $ref: '#/definitions/domain.Feature'
      - description: User UUID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/add.AddResponse'
        "400":
          description: Bad Request
          schema: {}
        "409":
          description: Conflict
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Add a new feature for this user.
    put:
      consumes:
      - application/json
      description: Get a all features releted to this userId.
      parameters:
      - description: User UUID
        in: path
        name: userId
        required: true
        type: string
      - description: Feature
        in: body
        name: feature
        required: true
        schema:
          $ref: '#/definitions/domain.Feature'
      produces:
      - text/plain
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Feature'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Get all of a users features.
  /api/{userId}/{featureId}:
    delete:
      consumes:
      - application/json
      description: Delete one of this users features.
      parameters:
      - description: User UUID
        in: path
        name: userId
        required: true
        type: string
      - description: Feature UUID
        in: path
        name: featureId
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "200":
          description: DELETED
          schema:
            type: string
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Delete a users feature.
    get:
      consumes:
      - application/json
      description: Get a feature with matching feature and user id.
      parameters:
      - description: User UUID
        in: path
        name: userId
        required: true
        type: string
      - description: Feature UUID
        in: path
        name: featureId
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Feature'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Get a users feature.
  /api/vote/{featureId}:
    put:
      consumes:
      - application/json
      description: Enables the user to place one vote against another users feature
        request.
      parameters:
      - description: Feature ID
        in: path
        name: featureId
        required: true
        type: string
      - description: Upvote Request Body
        in: body
        name: upvoteRequest
        required: true
        schema:
          $ref: '#/definitions/upvote.UpvoteRequest'
      produces:
      - text/plain
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/upvote.UpvoteResponse'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "409":
          description: Conflict
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Enables the user to vote for a new feature request.
  /status:
    get:
      consumes:
      - '*/*'
      description: get the status of server.
      produces:
      - text/plain
      responses:
        "200":
          description: I'm Alive!!!
          schema:
            type: string
      summary: Show if the server is alive.
schemes:
- http
swagger: "2.0"
